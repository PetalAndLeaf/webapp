{"ast":null,"code":"import { auth } from './fire';\nimport { AUTH_STATUS_CHANGE } from '../store/user/type';\nimport { signOutLocalStateClear } from '../utils/localStorage';\n/*********************************************************************/\n// Sign Up\n\nexport const signUpWithEmailAndPassword = async (email, password) => auth.createUserWithEmailAndPassword(email, password); // Sign In\n\nexport const signInWithEmailAndPassword = async (email, password) => auth.signInWithEmailAndPassword(email, password); // Auth Status Tracking\n\nexport function onAuthStatusChange(store) {\n  auth.onAuthStateChanged(user => {\n    if (user !== null) {\n      console.log('user signed in');\n    } else {\n      console.log('user signed out');\n    }\n\n    const isLoggedin = user === null ? false : true;\n    store.dispatch({\n      type: AUTH_STATUS_CHANGE,\n      user: user,\n      isLoggedin: isLoggedin\n    });\n  });\n}\n/*********************************************************************/\n\n/****Behaviors needs to be signed in First****************************/\n\n/*****Current User is Set When Login Action success *****************/\n//provide a store-connected var to get currentUser\n// const currentUser = useSelector((state: any) => state.user.currentUser)\n\n/*********************************************************************/\n// Sign out\n// dont define as async or use await,\n// otherwise return would be undefined\n\nexport const signOut = () => {\n  signOutLocalStateClear();\n  auth.signOut();\n}; // if (currentUser != null) {\n//   currentUser.providerData.forEach(function(profile) {\n//     console.log('Sign-in provider: ' + profile.providerId)\n//     console.log('  Provider-specific UID: ' + profile.uid)\n//     console.log('  Name: ' + profile.displayName)\n//     console.log('  Email: ' + profile.email)\n//     console.log('  Photo URL: ' + profile.photoURL)\n//   })\n// }\n// // Password Reset\n// export const doPasswordReset = (email: string) =>\n//   auth.sendPasswordResetEmail(email)\n// // Password Change\n// export const doPasswordUpdate = (password: string) =>\n//   auth.currentUser && auth.currentUser.updatePassword(password)\n// //Send a user a verification email\n// var user = firebase.auth().currentUser\n// user\n//   .sendEmailVerification()\n//   .then(function() {\n//     // Email sent.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n// var user = firebase.auth().currentUser\n// var newPassword = getASecureRandomPassword()\n// //Set a user's password\n// user\n//   .updatePassword(newPassword)\n//   .then(function() {\n//     // Update successful.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n// //Send a password reset email\n// var auth = firebase.auth()\n// var emailAddress = 'user@example.com'\n// auth\n//   .sendPasswordResetEmail(emailAddress)\n//   .then(function() {\n//     // Email sent.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n// //Delete a user\n// var user = firebase.auth().currentUser\n// user\n//   .delete()\n//   .then(function() {\n//     // User deleted.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n// // Prompt the user to re-provide their sign-in credentials\n// // Some security-sensitive actions—such as deleting an account\n// // setting a primary email address, and changing a password—require\n// // that the user has recently signed in.\n// user\n//   .reauthenticateWithCredential(credential)\n//   .then(function() {\n//     // User re-authenticated.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/lib/auth.tsx"],"names":["auth","AUTH_STATUS_CHANGE","signOutLocalStateClear","signUpWithEmailAndPassword","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStatusChange","store","onAuthStateChanged","user","console","log","isLoggedin","dispatch","type","signOut"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AAEA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,OACxCC,KADwC,EAExCC,QAFwC,KAGvBL,IAAI,CAACM,8BAAL,CAAoCF,KAApC,EAA2CC,QAA3C,CAHZ,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,OACxCH,KADwC,EAExCC,QAFwC,KAGvBL,IAAI,CAACO,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAHZ,C,CAKP;;AACA,OAAO,SAASG,kBAAT,CAA4BC,KAA5B,EAAwC;AAC7CT,EAAAA,IAAI,CAACU,kBAAL,CAAyBC,IAAD,IAAe;AACrC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AACD,UAAMC,UAAU,GAAGH,IAAI,KAAK,IAAT,GAAgB,KAAhB,GAAwB,IAA3C;AACAF,IAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAEf,kBADO;AAEbU,MAAAA,IAAI,EAAEA,IAFO;AAGbG,MAAAA,UAAU,EAAEA;AAHC,KAAf;AAKD,GAZD;AAaD;AACD;;AACA;;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3Bf,EAAAA,sBAAsB;AACtBF,EAAAA,IAAI,CAACiB,OAAL;AACD,CAHM,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { auth } from './fire'\nimport { AUTH_STATUS_CHANGE } from '../store/user/type'\nimport { signOutLocalStateClear } from '../utils/localStorage'\n\n/*********************************************************************/\n// Sign Up\nexport const signUpWithEmailAndPassword = async (\n  email: string,\n  password: string\n): Promise<any> => auth.createUserWithEmailAndPassword(email, password)\n\n// Sign In\nexport const signInWithEmailAndPassword = async (\n  email: string,\n  password: string\n): Promise<any> => auth.signInWithEmailAndPassword(email, password)\n\n// Auth Status Tracking\nexport function onAuthStatusChange(store: any) {\n  auth.onAuthStateChanged((user: any) => {\n    if (user !== null) {\n      console.log('user signed in')\n    } else {\n      console.log('user signed out')\n    }\n    const isLoggedin = user === null ? false : true\n    store.dispatch({\n      type: AUTH_STATUS_CHANGE,\n      user: user,\n      isLoggedin: isLoggedin\n    })\n  })\n}\n/*********************************************************************/\n/****Behaviors needs to be signed in First****************************/\n/*****Current User is Set When Login Action success *****************/\n\n//provide a store-connected var to get currentUser\n// const currentUser = useSelector((state: any) => state.user.currentUser)\n/*********************************************************************/\n// Sign out\n// dont define as async or use await,\n// otherwise return would be undefined\nexport const signOut = () => {\n  signOutLocalStateClear()\n  auth.signOut()\n}\n\n// if (currentUser != null) {\n//   currentUser.providerData.forEach(function(profile) {\n//     console.log('Sign-in provider: ' + profile.providerId)\n//     console.log('  Provider-specific UID: ' + profile.uid)\n//     console.log('  Name: ' + profile.displayName)\n//     console.log('  Email: ' + profile.email)\n//     console.log('  Photo URL: ' + profile.photoURL)\n//   })\n// }\n\n// // Password Reset\n// export const doPasswordReset = (email: string) =>\n//   auth.sendPasswordResetEmail(email)\n\n// // Password Change\n// export const doPasswordUpdate = (password: string) =>\n//   auth.currentUser && auth.currentUser.updatePassword(password)\n\n// //Send a user a verification email\n// var user = firebase.auth().currentUser\n// user\n//   .sendEmailVerification()\n//   .then(function() {\n//     // Email sent.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n\n// var user = firebase.auth().currentUser\n// var newPassword = getASecureRandomPassword()\n\n// //Set a user's password\n// user\n//   .updatePassword(newPassword)\n//   .then(function() {\n//     // Update successful.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n\n// //Send a password reset email\n// var auth = firebase.auth()\n// var emailAddress = 'user@example.com'\n// auth\n//   .sendPasswordResetEmail(emailAddress)\n//   .then(function() {\n//     // Email sent.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n\n// //Delete a user\n// var user = firebase.auth().currentUser\n// user\n//   .delete()\n//   .then(function() {\n//     // User deleted.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n\n// // Prompt the user to re-provide their sign-in credentials\n// // Some security-sensitive actions—such as deleting an account\n// // setting a primary email address, and changing a password—require\n// // that the user has recently signed in.\n// user\n//   .reauthenticateWithCredential(credential)\n//   .then(function() {\n//     // User re-authenticated.\n//   })\n//   .catch(function(error) {\n//     // An error happened.\n//   })\n"]},"metadata":{},"sourceType":"module"}