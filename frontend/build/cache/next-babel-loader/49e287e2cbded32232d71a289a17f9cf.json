{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { isEmpty } from 'lodash';\nimport { loadState } from '../utils/localStorage';\nimport { userReducer } from './user/reducer';\nimport { contentReducer } from './content/reducer';\nimport { cartReducer } from './cart/reducer';\nvar rootReducer = combineReducers({\n  user: userReducer,\n  content: contentReducer,\n  cart: cartReducer\n});\nexport function initStore(initialState) {\n  var middlewares = [thunkMiddleware];\n  var middleWareEnhancer = applyMiddleware.apply(void 0, middlewares); //load state from local Storage if exists\n\n  var persistedState = loadState();\n\n  if (!isEmpty(persistedState)) {\n    initialState = persistedState.state;\n  }\n\n  var store = createStore(rootReducer, initialState, composeWithDevTools(middleWareEnhancer));\n  return store;\n}","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/store/store.tsx"],"names":["createStore","combineReducers","applyMiddleware","thunkMiddleware","composeWithDevTools","isEmpty","loadState","userReducer","contentReducer","cartReducer","rootReducer","user","content","cart","initStore","initialState","middlewares","middleWareEnhancer","persistedState","state","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,IAAMC,WAAW,GAAGT,eAAe,CAAC;AAClCU,EAAAA,IAAI,EAAEJ,WAD4B;AAElCK,EAAAA,OAAO,EAAEJ,cAFyB;AAGlCK,EAAAA,IAAI,EAAEJ;AAH4B,CAAD,CAAnC;AAQA,OAAO,SAASK,SAAT,CAAmBC,YAAnB,EAAuC;AAC5C,MAAMC,WAAW,GAAG,CAACb,eAAD,CAApB;AACA,MAAMc,kBAAkB,GAAGf,eAAe,MAAf,SAAmBc,WAAnB,CAA3B,CAF4C,CAI5C;;AACA,MAAME,cAAc,GAAGZ,SAAS,EAAhC;;AACA,MAAI,CAACD,OAAO,CAACa,cAAD,CAAZ,EAA8B;AAC5BH,IAAAA,YAAY,GAAGG,cAAc,CAACC,KAA9B;AACD;;AAED,MAAMC,KAAK,GAAGpB,WAAW,CACvBU,WADuB,EAEvBK,YAFuB,EAGvBX,mBAAmB,CAACa,kBAAD,CAHI,CAAzB;AAMA,SAAOG,KAAP;AACD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { isEmpty } from 'lodash'\n\nimport { loadState } from '../utils/localStorage'\nimport { userReducer } from './user/reducer'\nimport { contentReducer } from './content/reducer'\nimport { cartReducer } from './cart/reducer'\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  content: contentReducer,\n  cart: cartReducer\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport function initStore(initialState?: any) {\n  const middlewares = [thunkMiddleware]\n  const middleWareEnhancer = applyMiddleware(...middlewares)\n\n  //load state from local Storage if exists\n  const persistedState = loadState()\n  if (!isEmpty(persistedState)) {\n    initialState = persistedState.state\n  }\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(middleWareEnhancer)\n  )\n\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}