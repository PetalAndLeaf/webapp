{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { db, fieldDelete } from './fire';\nimport { ProfileStructure } from '../utils/types'; // import { toPureObjectArray } from '../utils/helper'\n\n/********* *******    NOTICE ON AUTH ******* *************/\n\n/* ALL  read and write operation assumes that user is signed in\n ** this check is done in 1) action createors at client\n ** and 2) firestore rule in database */\n\n/************************ READ *****************************/\n\nconst fetchDoc = async path => {\n  const docRef = await db.doc(path).get();\n  const doc = docRef.data();\n  return doc;\n};\n\nconst fetchDocs = async (collection, orderBy = '') => {\n  const docsQuerySnapshot = await db.collection(collection).orderBy(orderBy).get();\n  const docs = [];\n  docsQuerySnapshot.forEach(doc => {\n    docs.push(_objectSpread({}, doc.data(), {\n      id: doc.id\n    }));\n  });\n  return docs;\n}; // Home page data\n\n\nexport const fetchProductList = async () => {\n  return await fetchDocs('products', 'order');\n}; // Product detail page data\n\nexport const fetchProduct = async id => {\n  return await fetchDoc(`products/${id}`);\n};\nexport const fetchProductStory = async id => {\n  return await fetchDoc(`products/${id}/stories/2019EN`);\n};\nexport const getUserProfile = async uid => {\n  return await fetchDoc(`users/${uid}`);\n}; // Listener for User Profile Data\n// return unsubscriobe function\n// pass as return in useEffect hook to\n// unsubscriobe when component unmount\n// For Account/Address USE\n\nexport function onUserProfileChange(uid, onNext, onError) {\n  return db.doc(`users/${uid}`).onSnapshot(onNext, onError);\n} // const getAddress = (snapshot: any) => {\n//   const addressList = snapshot.data().addressList\n//   addressList && setAddresses(addressList)\n// }\n// const getAddrErr = (err: any) => {\n//   console.log(err)\n// }\n// export const userAddressListener = (uid: string, getUserAddr: Function) => {\n//   onUserProfileChange(uid, getAddress, getAddrErr)\n// }\n\n/*********************** WRITE  BASIC OPERATIONS*******************/\n\nconst writeDoc = async (type, col, docID, data) => {\n  const path = `${col}/${docID}`;\n\n  try {\n    // const docRef = db.doc(`${col}/${docID}`)\n    switch (type) {\n      case 'set':\n        return await db.doc(path).set(data);\n\n      case 'update':\n        return await db.doc(path).update(data);\n\n      case 'delete':\n        //delete ENTIRE DOC, NOT A FIELD\n        return await db.doc(path).delete();\n\n      case 'deleteField':\n        //see firebase reference\n        const removeSytax = {\n          [data]: fieldDelete\n        };\n        return await db.doc(path).update(removeSytax);\n\n      default:\n        console.log('Incorrect firebase write opertion type');\n    }\n  } catch (err) {\n    console.log('Firebase Write to Doc Err ', err);\n  }\n};\n/******************************************************************/\n\n\nexport const deleteUserField = async (uid, fieldToRemove) => {\n  try {\n    await writeDoc('deleteField', 'users', uid, fieldToRemove);\n  } catch (err) {\n    console.log('err delete field ', err);\n  }\n};\nexport const createUserProfile = async userinfo => {\n  const {\n    uid,\n    email\n  } = userinfo;\n  const profile = new ProfileStructure({\n    email: email\n  });\n\n  try {\n    await writeDoc('set', 'users', uid, profile.toObject());\n  } catch (err) {\n    console.log('Firebase Create Doc Err ', err);\n  }\n};\n\nconst updateUserProfileField = async (uid, field, data) => {\n  // demonstrate how to user var as key of object in ES6\n  console.log(`update: {${_JSON$stringify(field)} : ${_JSON$stringify(data)} }`);\n  const newFieldData = {\n    [field]: data\n  };\n\n  try {\n    await writeDoc('update', 'users', uid, newFieldData);\n  } catch (err) {\n    console.log(err);\n  }\n}; //including update already exist and delete from the list.\n\n\nexport const updateUserAddress = async (uid, addressList) => {\n  try {\n    return await updateUserProfileField(uid, 'addressList', addressList);\n  } catch (err) {\n    console.log('err updateUserAddress', err);\n  }\n};\nexport const deleteUserAddress = async uid => {\n  return uid;\n};","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/lib/db.tsx"],"names":["db","fieldDelete","ProfileStructure","fetchDoc","path","docRef","doc","get","data","fetchDocs","collection","orderBy","docsQuerySnapshot","docs","forEach","push","id","fetchProductList","fetchProduct","fetchProductStory","getUserProfile","uid","onUserProfileChange","onNext","onError","onSnapshot","writeDoc","type","col","docID","set","update","delete","removeSytax","console","log","err","deleteUserField","fieldToRemove","createUserProfile","userinfo","email","profile","toObject","updateUserProfileField","field","newFieldData","updateUserAddress","addressList","deleteUserAddress"],"mappings":"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","sourcesContent":["import { db, fieldDelete } from './fire'\nimport { SingUpForm, ProfileStructure } from '../utils/types'\n// import { toPureObjectArray } from '../utils/helper'\n\n/********* *******    NOTICE ON AUTH ******* *************/\n/* ALL  read and write operation assumes that user is signed in\n ** this check is done in 1) action createors at client\n ** and 2) firestore rule in database */\n\n/************************ READ *****************************/\nconst fetchDoc = async (path: string) => {\n  const docRef = await db.doc(path).get()\n  const doc = docRef.data()\n  return doc\n}\n\nconst fetchDocs = async (collection: string, orderBy: string = '') => {\n  const docsQuerySnapshot = await db\n    .collection(collection)\n    .orderBy(orderBy)\n    .get()\n\n  const docs: any[] = []\n  docsQuerySnapshot.forEach((doc: any) => {\n    docs.push({ ...doc.data(), id: doc.id })\n  })\n  return docs\n}\n\n// Home page data\nexport const fetchProductList = async () => {\n  return await fetchDocs('products', 'order')\n}\n\n// Product detail page data\nexport const fetchProduct = async (id: string) => {\n  return await fetchDoc(`products/${id}`)\n}\nexport const fetchProductStory = async (id: string) => {\n  return await fetchDoc(`products/${id}/stories/2019EN`)\n}\n\nexport const getUserProfile = async (uid: string) => {\n  return await fetchDoc(`users/${uid}`)\n}\n\n// Listener for User Profile Data\n// return unsubscriobe function\n// pass as return in useEffect hook to\n// unsubscriobe when component unmount\n// For Account/Address USE\nexport function onUserProfileChange(\n  uid: string,\n  onNext: (snapshot: any) => void,\n  onError: (error: any) => void\n) {\n  return db.doc(`users/${uid}`).onSnapshot(onNext, onError)\n}\n\n// const getAddress = (snapshot: any) => {\n//   const addressList = snapshot.data().addressList\n//   addressList && setAddresses(addressList)\n// }\n// const getAddrErr = (err: any) => {\n//   console.log(err)\n// }\n// export const userAddressListener = (uid: string, getUserAddr: Function) => {\n//   onUserProfileChange(uid, getAddress, getAddrErr)\n// }\n\n/*********************** WRITE  BASIC OPERATIONS*******************/\nconst writeDoc = async (\n  type: string,\n  col: string,\n  docID: string,\n  data: any\n) => {\n  const path = `${col}/${docID}`\n  try {\n    // const docRef = db.doc(`${col}/${docID}`)\n    switch (type) {\n      case 'set':\n        return await db.doc(path).set(data)\n      case 'update':\n        return await db.doc(path).update(data)\n      case 'delete': //delete ENTIRE DOC, NOT A FIELD\n        return await db.doc(path).delete()\n      case 'deleteField': //see firebase reference\n        const removeSytax = {\n          [data]: fieldDelete\n        }\n        return await db.doc(path).update(removeSytax)\n      default:\n        console.log('Incorrect firebase write opertion type')\n    }\n  } catch (err) {\n    console.log('Firebase Write to Doc Err ', err)\n  }\n}\n/******************************************************************/\n\nexport const deleteUserField = async (uid: string, fieldToRemove: string) => {\n  try {\n    await writeDoc('deleteField', 'users', uid, fieldToRemove)\n  } catch (err) {\n    console.log('err delete field ', err)\n  }\n}\n\nexport const createUserProfile = async (userinfo: SingUpForm) => {\n  const { uid, email } = userinfo\n  const profile = new ProfileStructure({ email: email })\n  try {\n    await writeDoc('set', 'users', uid, profile.toObject())\n  } catch (err) {\n    console.log('Firebase Create Doc Err ', err)\n  }\n}\n\nconst updateUserProfileField = async (\n  uid: string,\n  field: string,\n  data: any\n) => {\n  // demonstrate how to user var as key of object in ES6\n  console.log(`update: {${JSON.stringify(field)} : ${JSON.stringify(data)} }`)\n  const newFieldData = {\n    [field]: data\n  }\n  try {\n    await writeDoc('update', 'users', uid, newFieldData)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\n//including update already exist and delete from the list.\nexport const updateUserAddress = async (uid: string, addressList: any[]) => {\n  try {\n    return await updateUserProfileField(uid, 'addressList', addressList)\n  } catch (err) {\n    console.log('err updateUserAddress', err)\n  }\n}\n\nexport const deleteUserAddress = async (uid: string) => {\n  return uid\n}\n"]},"metadata":{},"sourceType":"module"}