{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, LOGIN_REQUEST, SIGN_OUT, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAIL } from './type';\nimport { signInWithEmailAndPassword, signOut, signUpWithEmailAndPassword } from '../../lib/auth';\nimport { createUserProfile } from '../../lib/db';\nexport function LogInAction(email, password) {\n  return async dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n\n    try {\n      await signInWithEmailAndPassword(email, password);\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    } catch (err) {\n      console.log('login fail: ', err.code);\n      dispatch({\n        type: LOGIN_FAIL,\n        err: err.code\n      });\n    }\n  };\n}\nexport function SignOutAction() {\n  return async dispatch => {\n    try {\n      signOut();\n      dispatch({\n        type: SIGN_OUT\n      });\n    } catch (err) {\n      console.log('singout fail: ', err.code);\n    }\n  };\n}\nexport function SignUpAction(email, password) {\n  return async dispatch => {\n    dispatch({\n      type: SIGN_UP_REQUEST\n    });\n\n    try {\n      //sign up with email and password\n      const res = await signUpWithEmailAndPassword(email, password); //extract uid from auth res && also make sure it's success before proceed\n\n      const userInfo = {\n        uid: res.user.uid,\n        email: email\n      };\n      await createUserProfile(userInfo);\n      dispatch({\n        type: SIGN_UP_SUCCESS\n      });\n    } catch (err) {\n      console.log(err);\n      console.log('sign up fail: ', err.code);\n      dispatch({\n        type: SIGN_UP_FAIL,\n        err: err.code\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/store/user/action.tsx"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","LOGIN_REQUEST","SIGN_OUT","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAIL","signInWithEmailAndPassword","signOut","signUpWithEmailAndPassword","createUserProfile","LogInAction","email","password","dispatch","type","err","console","log","code","SignOutAction","SignUpAction","res","userInfo","uid","user"],"mappings":"AAEA,SACEA,aADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,YAPF,QAQO,QARP;AASA,SACEC,0BADF,EAEEC,OAFF,EAGEC,0BAHF,QAIO,gBAJP;AAKA,SAASC,iBAAT,QAAkC,cAAlC;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAoCC,QAApC,EAAmE;AACxE,SAAO,MAAOC,QAAP,IAA8B;AACnCA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMK,0BAA0B,CAACK,KAAD,EAAQC,QAAR,CAAhC;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEf;AADC,OAAD,CAAR;AAGD,KALD,CAKE,OAAOgB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAAG,CAACG,IAAhC;AACAL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEd,UAAR;AAAoBe,QAAAA,GAAG,EAAEA,GAAG,CAACG;AAA7B,OAAD,CAAR;AACD;AACF,GAXD;AAYD;AAED,OAAO,SAASC,aAAT,GAAsC;AAC3C,SAAO,MAAON,QAAP,IAA8B;AACnC,QAAI;AACFN,MAAAA,OAAO;AACPM,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEZ;AAAR,OAAD,CAAR;AACD,KAHD,CAGE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAAG,CAACG,IAAlC;AACD;AACF,GAPD;AAQD;AAED,OAAO,SAASE,YAAT,CAAsBT,KAAtB,EAAqCC,QAArC,EAAoE;AACzE,SAAO,MAAOC,QAAP,IAA8B;AACnCA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;;AACA,QAAI;AACF;AACA,YAAMkB,GAAG,GAAG,MAAMb,0BAA0B,CAACG,KAAD,EAAQC,QAAR,CAA5C,CAFE,CAGF;;AACA,YAAMU,QAAoB,GAAG;AAC3BC,QAAAA,GAAG,EAAEF,GAAG,CAACG,IAAJ,CAASD,GADa;AAE3BZ,QAAAA,KAAK,EAAEA;AAFoB,OAA7B;AAIA,YAAMF,iBAAiB,CAACa,QAAD,CAAvB;AACAT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEV;AADC,OAAD,CAAR;AAGD,KAZD,CAYE,OAAOW,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAAG,CAACG,IAAlC;AACAL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAET,YAAR;AAAsBU,QAAAA,GAAG,EAAEA,GAAG,CAACG;AAA/B,OAAD,CAAR;AACD;AACF,GAnBD;AAoBD","sourcesContent":["import { Dispatch } from 'redux'\nimport { ThunkAction, SingUpForm } from '../../utils/types'\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGIN_REQUEST,\n  SIGN_OUT,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAIL\n} from './type'\nimport {\n  signInWithEmailAndPassword,\n  signOut,\n  signUpWithEmailAndPassword\n} from '../../lib/auth'\nimport { createUserProfile } from '../../lib/db'\n\nexport function LogInAction(email: string, password: string): ThunkAction {\n  return async (dispatch: Dispatch) => {\n    dispatch({ type: LOGIN_REQUEST })\n    try {\n      await signInWithEmailAndPassword(email, password)\n      dispatch({\n        type: LOGIN_SUCCESS\n      })\n    } catch (err) {\n      console.log('login fail: ', err.code)\n      dispatch({ type: LOGIN_FAIL, err: err.code })\n    }\n  }\n}\n\nexport function SignOutAction(): ThunkAction {\n  return async (dispatch: Dispatch) => {\n    try {\n      signOut()\n      dispatch({ type: SIGN_OUT })\n    } catch (err) {\n      console.log('singout fail: ', err.code)\n    }\n  }\n}\n\nexport function SignUpAction(email: string, password: string): ThunkAction {\n  return async (dispatch: Dispatch) => {\n    dispatch({ type: SIGN_UP_REQUEST })\n    try {\n      //sign up with email and password\n      const res = await signUpWithEmailAndPassword(email, password)\n      //extract uid from auth res && also make sure it's success before proceed\n      const userInfo: SingUpForm = {\n        uid: res.user.uid,\n        email: email\n      }\n      await createUserProfile(userInfo)\n      dispatch({\n        type: SIGN_UP_SUCCESS\n      })\n    } catch (err) {\n      console.log(err)\n      console.log('sign up fail: ', err.code)\n      dispatch({ type: SIGN_UP_FAIL, err: err.code })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}