{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { throttle } from 'lodash'; // loads the state from localStorage\n\nexport var loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}; //saves the state to localStorage\n\nexport var saveState = function saveState(state) {\n  try {\n    var serializedState = _JSON$stringify(state);\n\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.log('save state err ', err);\n  }\n}; //sync local storage with redux store\n//throttle to at most 1 timer per sec\n\nexport var syncStoreLocal = function syncStoreLocal(store) {\n  store.subscribe(throttle(function () {\n    saveState({\n      state: store.getState()\n    });\n  }, 1000));\n}; //unsycn the app by clear localstorage\n//redux store will be reset by refresh or close tab\n\nexport var unsyncStoreLocal = function unsyncStoreLocal() {\n  localStorage.clear();\n}; //Sign out state clear, only retain state about cart\n\nexport var signOutLocalStateClear = function signOutLocalStateClear() {\n  var current = loadState().state;\n  var items = current.cart.items;\n  var retainedState = {\n    cart: {\n      isFlyoutOpen: false,\n      isSidebarOpen: false,\n      items: items\n    }\n  };\n  localStorage.clear();\n  saveState(retainedState);\n};","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/utils/localStorage.tsx"],"names":["throttle","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","setItem","console","log","syncStoreLocal","store","subscribe","getState","unsyncStoreLocal","clear","signOutLocalStateClear","current","items","cart","retainedState","isFlyoutOpen","isSidebarOpen"],"mappings":";AAAA,SAASA,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAI;AACF,QAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAxB;;AACA,QAAIF,eAAe,KAAK,IAAxB,EAA8B;AAC5B,aAAOG,SAAP;AACD;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAWL,eAAX,CAAP;AACD,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,WAAOH,SAAP;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAgB;AACvC,MAAI;AACF,QAAMR,eAAe,GAAG,gBAAeQ,KAAf,CAAxB;;AACAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BT,eAA9B;AACD,GAHD,CAGE,OAAOM,GAAP,EAAY;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,GAA/B;AACD;AACF,CAPM,C,CASP;AACA;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgB;AAC5CA,EAAAA,KAAK,CAACC,SAAN,CACEhB,QAAQ,CAAC,YAAM;AACbS,IAAAA,SAAS,CAAC;AACRC,MAAAA,KAAK,EAAEK,KAAK,CAACE,QAAN;AADC,KAAD,CAAT;AAGD,GAJO,EAIL,IAJK,CADV;AAOD,CARM,C,CAUP;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpCf,EAAAA,YAAY,CAACgB,KAAb;AACD,CAFM,C,CAIP;;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAC1C,MAAMC,OAAO,GAAGpB,SAAS,GAAGS,KAA5B;AAD0C,MAElCY,KAFkC,GAExBD,OAAO,CAACE,IAFgB,CAElCD,KAFkC;AAG1C,MAAME,aAAa,GAAG;AACpBD,IAAAA,IAAI,EAAE;AACJE,MAAAA,YAAY,EAAE,KADV;AAEJC,MAAAA,aAAa,EAAE,KAFX;AAGJJ,MAAAA,KAAK,EAAEA;AAHH;AADc,GAAtB;AAOAnB,EAAAA,YAAY,CAACgB,KAAb;AACAV,EAAAA,SAAS,CAACe,aAAD,CAAT;AACD,CAZM","sourcesContent":["import { throttle } from 'lodash'\n\n// loads the state from localStorage\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\n//saves the state to localStorage\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch (err) {\n    console.log('save state err ', err)\n  }\n}\n\n//sync local storage with redux store\n//throttle to at most 1 timer per sec\nexport const syncStoreLocal = (store: any) => {\n  store.subscribe(\n    throttle(() => {\n      saveState({\n        state: store.getState()\n      })\n    }, 1000)\n  )\n}\n\n//unsycn the app by clear localstorage\n//redux store will be reset by refresh or close tab\nexport const unsyncStoreLocal = () => {\n  localStorage.clear()\n}\n\n//Sign out state clear, only retain state about cart\nexport const signOutLocalStateClear = () => {\n  const current = loadState().state\n  const { items } = current.cart\n  const retainedState = {\n    cart: {\n      isFlyoutOpen: false,\n      isSidebarOpen: false,\n      items: items\n    }\n  }\n  localStorage.clear()\n  saveState(retainedState)\n}\n"]},"metadata":{},"sourceType":"module"}