{"ast":null,"code":"var _jsxFileName = \"/Users/jianruan/Developer/webapp/frontend/stripe/asyncStripeProvider.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { StripeProvider } from 'react-stripe-elements';\n\nvar AsyncStripeProvider = function AsyncStripeProvider(props) {\n  var apiKey = props.apiKey,\n      children = props.children;\n\n  var _useState = useState(null),\n      stripe = _useState[0],\n      setStripe = _useState[1];\n\n  var isMounted = useRef(false);\n\n  var unmountFn = function unmountFn() {\n    isMounted.current = false;\n  };\n\n  useEffect(function () {\n    isMounted.current = true; // If we already have stripe loaded, we don't need to do anything\n\n    if (stripe) return unmountFn; // Check if Stripe already exists in the window (probably from a previous mount)\n\n    if (window.Stripe) {\n      setStripe(window.Stripe(apiKey));\n      return unmountFn;\n    } // Otherwise, we need to create the script element\n\n\n    var stripeJs = document.createElement('script');\n    stripeJs.src = 'https://js.stripe.com/v3/';\n    stripeJs.async = true; // Tell our component what to do once the script has loaded\n\n    stripeJs.onload = function () {\n      // Only update Stripe if this component is still mounted\n      if (isMounted) setStripe(window.Stripe(apiKey));\n    }; // Add the script to the document\n\n\n    document.body && document.body.appendChild(stripeJs);\n    return unmountFn;\n  }, [stripe, apiKey]);\n  return __jsx(StripeProvider, {\n    stripe: stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, children));\n};\n\nexport default AsyncStripeProvider;\n/* Reference\n  https://gist.github.com/daviseford/4a0ed622dc47090fe22c1870217d88d6\n  https://gist.github.com/mrcoles/8c79595f488f0e334e528163feb23293\n*/","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/stripe/asyncStripeProvider.tsx"],"names":["React","useState","useEffect","useRef","StripeProvider","AsyncStripeProvider","props","apiKey","children","stripe","setStripe","isMounted","unmountFn","current","window","Stripe","stripeJs","document","createElement","src","async","onload","body","appendChild"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAMA,IAAMC,mBAA8B,GAAG,SAAjCA,mBAAiC,CAAAC,KAAK,EAAI;AAAA,MACtCC,MADsC,GACjBD,KADiB,CACtCC,MADsC;AAAA,MAC9BC,QAD8B,GACjBF,KADiB,CAC9BE,QAD8B;;AAAA,kBAElBP,QAAQ,CAAuB,IAAvB,CAFU;AAAA,MAEvCQ,MAFuC;AAAA,MAE/BC,SAF+B;;AAG9C,MAAMC,SAAS,GAAGR,MAAM,CAAC,KAAD,CAAxB;;AACA,MAAMS,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBD,IAAAA,SAAS,CAACE,OAAV,GAAoB,KAApB;AACD,GAFD;;AAIAX,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,SAAS,CAACE,OAAV,GAAoB,IAApB,CADc,CAGd;;AACA,QAAIJ,MAAJ,EAAY,OAAOG,SAAP,CAJE,CAMd;;AACA,QAAKE,MAAD,CAAgBC,MAApB,EAA4B;AAC1BL,MAAAA,SAAS,CAACI,MAAM,CAACC,MAAP,CAAcR,MAAd,CAAD,CAAT;AACA,aAAOK,SAAP;AACD,KAVa,CAYd;;;AACA,QAAMI,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,GAAT,GAAe,2BAAf;AACAH,IAAAA,QAAQ,CAACI,KAAT,GAAiB,IAAjB,CAfc,CAiBd;;AACAJ,IAAAA,QAAQ,CAACK,MAAT,GAAkB,YAAM;AACtB;AACA,UAAIV,SAAJ,EAAeD,SAAS,CAACI,MAAM,CAACC,MAAP,CAAcR,MAAd,CAAD,CAAT;AAChB,KAHD,CAlBc,CAuBd;;;AACAU,IAAAA,QAAQ,CAACK,IAAT,IAAiBL,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,QAA1B,CAAjB;AAEA,WAAOJ,SAAP;AACD,GA3BQ,EA2BN,CAACH,MAAD,EAASF,MAAT,CA3BM,CAAT;AA6BA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,4BAAGD,QAAH,CADF,CADF;AAKD,CA1CD;;AA4CA,eAAeH,mBAAf;AAEA","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { StripeProvider } from 'react-stripe-elements'\nimport { CustomWindow } from '../utils/types'\ndeclare let window: CustomWindow\n\ntype TProvider = React.FC<{ apiKey: string }>\n\nconst AsyncStripeProvider: TProvider = props => {\n  const { apiKey, children } = props\n  const [stripe, setStripe] = useState<stripe.Stripe | null>(null)\n  const isMounted = useRef(false)\n  const unmountFn = () => {\n    isMounted.current = false\n  }\n\n  useEffect(() => {\n    isMounted.current = true\n\n    // If we already have stripe loaded, we don't need to do anything\n    if (stripe) return unmountFn\n\n    // Check if Stripe already exists in the window (probably from a previous mount)\n    if ((window as any).Stripe) {\n      setStripe(window.Stripe(apiKey))\n      return unmountFn\n    }\n\n    // Otherwise, we need to create the script element\n    const stripeJs = document.createElement('script')\n    stripeJs.src = 'https://js.stripe.com/v3/'\n    stripeJs.async = true\n\n    // Tell our component what to do once the script has loaded\n    stripeJs.onload = () => {\n      // Only update Stripe if this component is still mounted\n      if (isMounted) setStripe(window.Stripe(apiKey))\n    }\n\n    // Add the script to the document\n    document.body && document.body.appendChild(stripeJs)\n\n    return unmountFn\n  }, [stripe, apiKey])\n\n  return (\n    <StripeProvider stripe={stripe}>\n      <>{children}</>\n    </StripeProvider>\n  )\n}\n\nexport default AsyncStripeProvider\n\n/* Reference\n  https://gist.github.com/daviseford/4a0ed622dc47090fe22c1870217d88d6\n  https://gist.github.com/mrcoles/8c79595f488f0e334e528163feb23293\n*/\n"]},"metadata":{},"sourceType":"module"}