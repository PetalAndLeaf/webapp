{"ast":null,"code":"var _jsxFileName = \"/Users/jianruan/Developer/webapp/frontend/pages/account/address.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Typography } from '@material-ui/core';\nimport AccountLayout from '../../layout/AccountLayout';\nimport styled from 'styled-components';\nimport RoundedBtn from '../../components/Button/RoundedBtn';\nimport { AddressFormType } from '../../utils/types';\nimport { AsYouType } from 'libphonenumber-js';\nimport AddressBox from '../../components/Address/AddressBox';\nimport AddressForm from '../../components/Address/AddressForm';\nimport { onUserProfileChange, updateUserAddress } from '../../lib/db';\nimport { isEmpty } from 'lodash';\nimport { AddressToPureObjectArray } from '../../utils/helper';\nimport Router from 'next/router';\nconst Header = styled.div.withConfig({\n  displayName: \"address__Header\",\n  componentId: \"sc-1oaf82c-0\"\n})([\"height:64px;min-height:64px;display:flex;align-items:center;margin-bottom:16px;\"]);\nconst DEFAULT = 0;\nconst EDITTING = 1;\nconst ADDINGNEW = 2;\nexport default function Address() {\n  const currentUser = useSelector(state => state.user.currentUser);\n  const uid = currentUser ? currentUser.uid : '';\n  const {\n    0: addresses,\n    1: setAddresses\n  } = useState([]);\n\n  const getAddress = snapshot => {\n    const addressList = snapshot.data().addressList;\n    addressList && setAddresses(addressList);\n  };\n\n  const getAddrErr = err => {\n    console.log(err);\n  }; // 0 - default, 1 - editing, 2 - add new\n\n\n  const {\n    0: mode,\n    1: setMode\n  } = useState(DEFAULT);\n  const {\n    0: editingAddress,\n    1: setEditingAddress\n  } = useState(new AddressFormType());\n  const {\n    0: editingIndex,\n    1: setEditingIndex\n  } = useState(-1);\n  useEffect(() => {\n    const profileListener = onUserProfileChange(uid, getAddress, getAddrErr);\n    return () => profileListener(); //unsubscribe when unmount\n  }, []);\n\n  const handleAddClick = () => {\n    setEditingAddress(new AddressFormType());\n    setMode(ADDINGNEW);\n  };\n\n  const handleEditClick = (addr, editingIndex) => {\n    const formatted = new AsYouType('US').input(addr.phone);\n    const currentAddress = new AddressFormType({\n      fullname: addr.fullname,\n      line1: addr.line1,\n      line2: addr.line2 || '',\n      city: addr.city,\n      state: addr.state,\n      zipcode: addr.zipcode,\n      phone: addr.phone,\n      formattedPhone: formatted,\n      isValid: false\n    });\n    setEditingAddress(currentAddress);\n    setMode(EDITTING);\n    setEditingIndex(editingIndex);\n  };\n\n  const handleAddressDelete = addressIndex => {\n    const newAddresses = addresses.slice();\n    newAddresses.splice(addressIndex, 1);\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses));\n  };\n\n  const handleSetAsDefault = addressIndex => {\n    const newAddresses = addresses.slice();\n    newAddresses.forEach((addr, i) => {\n      if (i === addressIndex) {\n        addr.isDefault = true;\n      } else {\n        addr.isDefault = false;\n      }\n    });\n    const defaultAddress = newAddresses[addressIndex];\n    newAddresses.splice(addressIndex, 1);\n    newAddresses.unshift(defaultAddress);\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses));\n  };\n\n  const handleAddressSubmit = newAddress => {\n    const newAddresses = addresses.slice();\n\n    if (mode === EDITTING) {\n      newAddresses.splice(editingIndex, 1, newAddress);\n    } else if (mode === ADDINGNEW) {\n      //if first/only add addr, auto set as default\n      //addr list garantee 1 default addr\n      if (isEmpty(newAddresses)) {\n        newAddress.isDefault = true;\n      }\n\n      newAddresses.push(newAddress);\n    }\n\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses)); // console.log('Updates/New address: ', newAddress)\n\n    setMode(DEFAULT);\n    setEditingIndex(-1);\n    setEditingAddress(new AddressFormType());\n  };\n\n  return __jsx(AccountLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, mode === EDITTING ? 'Edit your shipping address' : mode === ADDINGNEW ? 'Add shipping address' : 'Manage your shipping address')), mode === DEFAULT && !isEmpty(addresses) && addresses.map((addr, i) => {\n    return __jsx(AddressBox, {\n      address: addr,\n      key: `address-${i}`,\n      onEdit: () => handleEditClick(addr, i),\n      onDelete: () => handleAddressDelete(i),\n      onSetAsDefault: () => handleSetAsDefault(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    });\n  }), mode !== DEFAULT && __jsx(AddressForm, {\n    initAddress: editingAddress,\n    submitBtn: {\n      label: 'Save',\n      handleClick: handleAddressSubmit\n    },\n    handleCancel: () => setMode(DEFAULT),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), mode === DEFAULT && __jsx(RoundedBtn, {\n    onClick: handleAddClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Add address\"));\n}\n\nAddress.getInitialProps = async function (ctx) {\n  const {\n    store,\n    isServer\n  } = ctx;\n  const {\n    isLoggedin\n  } = store.getState().user;\n\n  if (!isLoggedin) {\n    if (isServer) {\n      ctx.res.writeHead(302, {\n        Location: `/`\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/');\n    }\n  }\n\n  return {\n    isServer\n  };\n};","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/pages/account/address.tsx"],"names":["React","useState","useEffect","useSelector","Typography","AccountLayout","styled","RoundedBtn","AddressFormType","AsYouType","AddressBox","AddressForm","onUserProfileChange","updateUserAddress","isEmpty","AddressToPureObjectArray","Router","Header","div","DEFAULT","EDITTING","ADDINGNEW","Address","currentUser","state","user","uid","addresses","setAddresses","getAddress","snapshot","addressList","data","getAddrErr","err","console","log","mode","setMode","editingAddress","setEditingAddress","editingIndex","setEditingIndex","profileListener","handleAddClick","handleEditClick","addr","formatted","input","phone","currentAddress","fullname","line1","line2","city","zipcode","formattedPhone","isValid","handleAddressDelete","addressIndex","newAddresses","slice","splice","handleSetAsDefault","forEach","i","isDefault","defaultAddress","unshift","handleAddressSubmit","newAddress","push","map","label","handleClick","getInitialProps","ctx","store","isServer","isLoggedin","getState","res","writeHead","Location","end"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Typography } from '@material-ui/core'\nimport AccountLayout from '../../layout/AccountLayout'\nimport styled from 'styled-components'\nimport RoundedBtn from '../../components/Button/RoundedBtn'\nimport { AddressFormType } from '../../utils/types'\nimport { AsYouType } from 'libphonenumber-js'\nimport AddressBox from '../../components/Address/AddressBox'\nimport AddressForm from '../../components/Address/AddressForm'\nimport { onUserProfileChange, updateUserAddress } from '../../lib/db'\nimport { isEmpty } from 'lodash'\nimport { AddressToPureObjectArray } from '../../utils/helper'\nimport Router from 'next/router'\n\nconst Header = styled.div`\n  height: 64px;\n  min-height: 64px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n`\n\nconst DEFAULT = 0\nconst EDITTING = 1\nconst ADDINGNEW = 2\n\nexport default function Address() {\n  const currentUser = useSelector((state: any) => state.user.currentUser)\n  const uid = currentUser ? currentUser.uid : ''\n  const [addresses, setAddresses] = useState<AddressFormType[]>([])\n\n  const getAddress = (snapshot: any) => {\n    const addressList = snapshot.data().addressList\n    addressList && setAddresses(addressList)\n  }\n  const getAddrErr = (err: any) => {\n    console.log(err)\n  }\n\n  // 0 - default, 1 - editing, 2 - add new\n  const [mode, setMode] = useState(DEFAULT)\n  const [editingAddress, setEditingAddress] = useState(new AddressFormType())\n  const [editingIndex, setEditingIndex] = useState(-1)\n\n  useEffect(() => {\n    const profileListener = onUserProfileChange(uid, getAddress, getAddrErr)\n    return () => profileListener() //unsubscribe when unmount\n  }, [])\n\n  const handleAddClick = () => {\n    setEditingAddress(new AddressFormType())\n    setMode(ADDINGNEW)\n  }\n\n  const handleEditClick = (addr: any, editingIndex: number) => {\n    const formatted = new AsYouType('US').input(addr.phone)\n    const currentAddress = new AddressFormType({\n      fullname: addr.fullname,\n      line1: addr.line1,\n      line2: addr.line2 || '',\n      city: addr.city,\n      state: addr.state,\n      zipcode: addr.zipcode,\n      phone: addr.phone,\n      formattedPhone: formatted,\n      isValid: false\n    })\n    setEditingAddress(currentAddress)\n    setMode(EDITTING)\n    setEditingIndex(editingIndex)\n  }\n\n  const handleAddressDelete = (addressIndex: number) => {\n    const newAddresses = addresses.slice()\n    newAddresses.splice(addressIndex, 1)\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses))\n  }\n\n  const handleSetAsDefault = (addressIndex: number) => {\n    const newAddresses = addresses.slice()\n    newAddresses.forEach((addr: AddressFormType, i: number) => {\n      if (i === addressIndex) {\n        addr.isDefault = true\n      } else {\n        addr.isDefault = false\n      }\n    })\n    const defaultAddress = newAddresses[addressIndex]\n    newAddresses.splice(addressIndex, 1)\n    newAddresses.unshift(defaultAddress)\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses))\n  }\n\n  const handleAddressSubmit = (newAddress: AddressFormType) => {\n    const newAddresses = addresses.slice()\n    if (mode === EDITTING) {\n      newAddresses.splice(editingIndex, 1, newAddress)\n    } else if (mode === ADDINGNEW) {\n      //if first/only add addr, auto set as default\n      //addr list garantee 1 default addr\n      if (isEmpty(newAddresses)) {\n        newAddress.isDefault = true\n      }\n      newAddresses.push(newAddress)\n    }\n    updateUserAddress(uid, AddressToPureObjectArray(newAddresses))\n    // console.log('Updates/New address: ', newAddress)\n    setMode(DEFAULT)\n    setEditingIndex(-1)\n    setEditingAddress(new AddressFormType())\n  }\n  return (\n    <AccountLayout>\n      <Header>\n        <Typography variant=\"h4\">\n          {mode === EDITTING\n            ? 'Edit your shipping address'\n            : mode === ADDINGNEW\n            ? 'Add shipping address'\n            : 'Manage your shipping address'}\n        </Typography>\n      </Header>\n      {mode === DEFAULT &&\n        !isEmpty(addresses) &&\n        (addresses as any).map((addr: any, i: number) => {\n          return (\n            <AddressBox\n              address={addr}\n              key={`address-${i}`}\n              onEdit={() => handleEditClick(addr, i)}\n              onDelete={() => handleAddressDelete(i)}\n              onSetAsDefault={() => handleSetAsDefault(i)}\n            />\n          )\n        })}\n      {mode !== DEFAULT && (\n        <AddressForm\n          initAddress={editingAddress}\n          submitBtn={{ label: 'Save', handleClick: handleAddressSubmit }}\n          handleCancel={() => setMode(DEFAULT)}\n        />\n      )}\n\n      {mode === DEFAULT && (\n        <RoundedBtn onClick={handleAddClick}>Add address</RoundedBtn>\n      )}\n    </AccountLayout>\n  )\n}\n\nAddress.getInitialProps = async function(ctx: any) {\n  const { store, isServer } = ctx\n  const { isLoggedin } = store.getState().user\n  if (!isLoggedin) {\n    if (isServer) {\n      ctx.res.writeHead(302, { Location: `/` })\n      ctx.res.end()\n    } else {\n      Router.push('/')\n    }\n  }\n  return {\n    isServer\n  }\n}\n"]},"metadata":{},"sourceType":"module"}