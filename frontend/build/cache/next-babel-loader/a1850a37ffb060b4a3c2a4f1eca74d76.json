{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jianruan/Developer/webapp/frontend/components/Address/AddressForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Grid } from '@material-ui/core';\nimport RoundedBtn from '../Button/RoundedBtn';\nimport InputField from '../InputField';\nimport states from '../../static/data/states_hash.json';\nimport { AsYouType, parsePhoneNumberFromString } from 'libphonenumber-js';\nimport { AddressFormType } from '../../utils/types';\nimport TextBtn from '../Button/TextBtn';\nvar Container = styled.div.withConfig({\n  displayName: \"AddressForm__Container\",\n  componentId: \"sc-1mz128q-0\"\n})([\"max-width:100%;\"]);\nexport default function AddressForm(_ref) {\n  var initAddress = _ref.initAddress,\n      submitBtn = _ref.submitBtn,\n      handleCancel = _ref.handleCancel;\n\n  var _useState = useState(initAddress || new AddressFormType()),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var handleAddressOnChange = function handleAddressOnChange(e) {\n    var _objectSpread3;\n\n    var value = e.target.value;\n    var name = e.target.name;\n    setAddress(_objectSpread({}, address, (_objectSpread3 = {}, _defineProperty(_objectSpread3, name, value), _defineProperty(_objectSpread3, \"errors\", _objectSpread({}, address.errors, _defineProperty({}, name, value !== '' ? '' : address.errors[name]))), _objectSpread3)));\n  };\n\n  var handlePhoneOnChange = function handlePhoneOnChange(e) {\n    var currentFormatted = e.target.value;\n    var phone = currentFormatted.replace(/[^\\d]/g, '');\n    var formatted = new AsYouType('US').input(phone);\n    setAddress(_objectSpread({}, address, {\n      phone: phone,\n      formattedPhone: formatted,\n      errors: _objectSpread({}, address.errors, {\n        phone: phone !== '' ? '' : address.errors.phone\n      })\n    }));\n  };\n\n  var handleAddressOnBlur = function handleAddressOnBlur(e) {\n    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'empty';\n    var name = e.target.name;\n    var errorMsg = '';\n\n    if (error.includes('empty') && address[name] === '') {\n      errorMsg = 'This is required';\n    }\n\n    if (error.includes('phone')) {\n      var phone = parsePhoneNumberFromString(address.formattedPhone, 'US');\n\n      if (phone === undefined || !phone.isValid()) {\n        errorMsg = 'Invalid phone number';\n      }\n    }\n\n    var isValid = true;\n    if (errorMsg !== '') isValid = false;\n    var items = ['fullname', 'line1', 'city', 'state', 'zipcode', 'phone'];\n    items.forEach(function (item) {\n      if (address[item] === '') isValid = false;\n    });\n    setAddress(_objectSpread({}, address, {\n      errors: _objectSpread({}, address.errors, _defineProperty({}, name, errorMsg)),\n      isValid: isValid\n    }));\n  };\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(InputField, {\n    name: \"fullname\",\n    label: \"Full Name\",\n    value: address.fullname,\n    placeholder: \"First and Last Name\",\n    error: address.errors.fullname,\n    onChange: handleAddressOnChange,\n    onBlur: handleAddressOnBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), __jsx(InputField, {\n    name: \"line1\",\n    label: \"Address line 1\",\n    value: address.line1,\n    placeholder: \"1000 Main St\",\n    error: address.errors.line1,\n    onChange: handleAddressOnChange,\n    onBlur: handleAddressOnBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(InputField, {\n    name: \"line2\",\n    label: \"Address line 2\",\n    value: address.line2,\n    placeholder: \"Apt. 1234\",\n    onChange: handleAddressOnChange,\n    optional: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(InputField, {\n    name: \"city\",\n    label: \"City\",\n    value: address.city,\n    placeholder: \"San Jose\",\n    error: address.errors.city,\n    onChange: handleAddressOnChange,\n    onBlur: handleAddressOnBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(InputField, {\n    name: \"state\",\n    label: \"State\",\n    value: address.state,\n    onChange: handleAddressOnChange,\n    onBlur: handleAddressOnBlur,\n    type: \"select\",\n    options: _Object$keys(states),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(InputField, {\n    name: \"zipcode\",\n    label: \"Zip code\",\n    value: address.zipcode,\n    placeholder: \"00000\",\n    error: address.errors.zipcode,\n    onChange: handleAddressOnChange,\n    onBlur: handleAddressOnBlur,\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, __jsx(InputField, {\n    name: \"phone\",\n    label: \"Phone number\",\n    value: address.formattedPhone,\n    error: address.errors.phone,\n    placeholder: \"(123) 456-7890\",\n    onChange: handlePhoneOnChange,\n    onBlur: function onBlur(e) {\n      return handleAddressOnBlur(e, 'empty|phone');\n    },\n    type: \"tel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }))), __jsx(RoundedBtn, {\n    onClick: function onClick() {\n      return address.isValid && submitBtn && submitBtn.handleClick(address);\n    },\n    style: {\n      marginTop: 16,\n      marginRight: 16\n    },\n    disabled: !address.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, submitBtn ? submitBtn.label : 'Save'), handleCancel && __jsx(TextBtn, {\n    onClick: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Cancel\"));\n}","map":{"version":3,"sources":["/Users/jianruan/Developer/webapp/frontend/components/Address/AddressForm.tsx"],"names":["React","useState","styled","Grid","RoundedBtn","InputField","states","AsYouType","parsePhoneNumberFromString","AddressFormType","TextBtn","Container","div","AddressForm","initAddress","submitBtn","handleCancel","address","setAddress","handleAddressOnChange","e","value","target","name","errors","handlePhoneOnChange","currentFormatted","phone","replace","formatted","input","formattedPhone","handleAddressOnBlur","error","errorMsg","includes","undefined","isValid","items","forEach","item","fullname","line1","line2","city","state","zipcode","handleClick","marginTop","marginRight","label"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,SAASC,SAAT,EAAoBC,0BAApB,QAAsD,mBAAtD;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,IAAMC,SAAS,GAAGT,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,uBAAf;AAYA,eAAe,SAASC,WAAT,OAIA;AAAA,MAHbC,WAGa,QAHbA,WAGa;AAAA,MAFbC,SAEa,QAFbA,SAEa;AAAA,MADbC,YACa,QADbA,YACa;;AAAA,kBACiBf,QAAQ,CAACa,WAAW,IAAI,IAAIL,eAAJ,EAAhB,CADzB;AAAA,MACNQ,OADM;AAAA,MACGC,UADH;;AAGb,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BC,CAD4B,EAEzB;AAAA;;AACH,QAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,QAAME,IAAI,GAAGH,CAAC,CAACE,MAAF,CAASC,IAAtB;AACAL,IAAAA,UAAU,mBACLD,OADK,wDAEPM,IAFO,EAEAF,KAFA,+DAIHJ,OAAO,CAACO,MAJL,sBAKLD,IALK,EAKEF,KAAK,KAAK,EAAV,GAAe,EAAf,GAAoBJ,OAAO,CAACO,MAAR,CAAeD,IAAf,CALtB,sBAAV;AAQD,GAbD;;AAcA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BL,CAD0B,EAEvB;AACH,QAAMM,gBAAgB,GAAGN,CAAC,CAACE,MAAF,CAASD,KAAlC;AACA,QAAMM,KAAK,GAAGD,gBAAgB,CAACE,OAAjB,CAAyB,QAAzB,EAAmC,EAAnC,CAAd;AACA,QAAMC,SAAS,GAAG,IAAItB,SAAJ,CAAc,IAAd,EAAoBuB,KAApB,CAA0BH,KAA1B,CAAlB;AACAT,IAAAA,UAAU,mBACLD,OADK;AAERU,MAAAA,KAAK,EAAEA,KAFC;AAGRI,MAAAA,cAAc,EAAEF,SAHR;AAIRL,MAAAA,MAAM,oBACDP,OAAO,CAACO,MADP;AAEJG,QAAAA,KAAK,EAAEA,KAAK,KAAK,EAAV,GAAe,EAAf,GAAoBV,OAAO,CAACO,MAAR,CAAeG;AAFtC;AAJE,OAAV;AASD,GAfD;;AAgBA,MAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BZ,CAD0B,EAGvB;AAAA,QADHa,KACG,uEADa,OACb;AACH,QAAMV,IAAI,GAAGH,CAAC,CAACE,MAAF,CAASC,IAAtB;AACA,QAAIW,QAAQ,GAAG,EAAf;;AACA,QAAID,KAAK,CAACE,QAAN,CAAe,OAAf,KAA2BlB,OAAO,CAACM,IAAD,CAAP,KAAkB,EAAjD,EAAqD;AACnDW,MAAAA,QAAQ,GAAG,kBAAX;AACD;;AACD,QAAID,KAAK,CAACE,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAC3B,UAAMR,KAAK,GAAGnB,0BAA0B,CAACS,OAAO,CAACc,cAAT,EAAyB,IAAzB,CAAxC;;AACA,UAAIJ,KAAK,KAAKS,SAAV,IAAuB,CAACT,KAAK,CAACU,OAAN,EAA5B,EAA6C;AAC3CH,QAAAA,QAAQ,GAAG,sBAAX;AACD;AACF;;AACD,QAAIG,OAAgB,GAAG,IAAvB;AACA,QAAIH,QAAQ,KAAK,EAAjB,EAAqBG,OAAO,GAAG,KAAV;AACrB,QAAMC,KAAK,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,EAA8B,OAA9B,EAAuC,SAAvC,EAAkD,OAAlD,CAAd;AACAA,IAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,UAAIvB,OAAO,CAACuB,IAAD,CAAP,KAAkB,EAAtB,EAA0BH,OAAO,GAAG,KAAV;AAC3B,KAFD;AAIAnB,IAAAA,UAAU,mBACLD,OADK;AAERO,MAAAA,MAAM,oBACDP,OAAO,CAACO,MADP,sBAEHD,IAFG,EAEIW,QAFJ,EAFE;AAMRG,MAAAA,OAAO,EAAEA;AAND,OAAV;AAQD,GA9BD;;AA+BA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,KAAK,EAAEpB,OAAO,CAACwB,QAHjB;AAIE,IAAA,WAAW,EAAC,qBAJd;AAKE,IAAA,KAAK,EAAExB,OAAO,CAACO,MAAR,CAAeiB,QALxB;AAME,IAAA,QAAQ,EAAEtB,qBANZ;AAOE,IAAA,MAAM,EAAEa,mBAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,KAAK,EAAEf,OAAO,CAACyB,KAHjB;AAIE,IAAA,WAAW,EAAC,cAJd;AAKE,IAAA,KAAK,EAAEzB,OAAO,CAACO,MAAR,CAAekB,KALxB;AAME,IAAA,QAAQ,EAAEvB,qBANZ;AAOE,IAAA,MAAM,EAAEa,mBAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAmBE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,KAAK,EAAEf,OAAO,CAAC0B,KAHjB;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,QAAQ,EAAExB,qBALZ;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EA2BE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,KAAK,EAAEF,OAAO,CAAC2B,IAHjB;AAIE,IAAA,WAAW,EAAC,UAJd;AAKE,IAAA,KAAK,EAAE3B,OAAO,CAACO,MAAR,CAAeoB,IALxB;AAME,IAAA,QAAQ,EAAEzB,qBANZ;AAOE,IAAA,MAAM,EAAEa,mBAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAYE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,KAAK,EAAEf,OAAO,CAAC4B,KAHjB;AAIE,IAAA,QAAQ,EAAE1B,qBAJZ;AAKE,IAAA,MAAM,EAAEa,mBALV;AAME,IAAA,IAAI,EAAC,QANP;AAOE,IAAA,OAAO,EAAE,aAAY1B,MAAZ,CAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,CA3BF,EAmDE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,KAAK,EAAEW,OAAO,CAAC6B,OAHjB;AAIE,IAAA,WAAW,EAAC,OAJd;AAKE,IAAA,KAAK,EAAE7B,OAAO,CAACO,MAAR,CAAesB,OALxB;AAME,IAAA,QAAQ,EAAE3B,qBANZ;AAOE,IAAA,MAAM,EAAEa,mBAPV;AAQE,IAAA,IAAI,EAAC,QARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAaE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,KAAK,EAAEf,OAAO,CAACc,cAHjB;AAIE,IAAA,KAAK,EAAEd,OAAO,CAACO,MAAR,CAAeG,KAJxB;AAKE,IAAA,WAAW,EAAC,gBALd;AAME,IAAA,QAAQ,EAAEF,mBANZ;AAOE,IAAA,MAAM,EAAE,gBAAAL,CAAC;AAAA,aAAIY,mBAAmB,CAACZ,CAAD,EAAI,aAAJ,CAAvB;AAAA,KAPX;AAQE,IAAA,IAAI,EAAC,KARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbF,CAnDF,EA6EE,MAAC,UAAD;AACE,IAAA,OAAO,EAAE;AAAA,aACPH,OAAO,CAACoB,OAAR,IAAmBtB,SAAnB,IAAgCA,SAAS,CAACgC,WAAV,CAAsB9B,OAAtB,CADzB;AAAA,KADX;AAIE,IAAA,KAAK,EAAE;AAAE+B,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,WAAW,EAAE;AAA9B,KAJT;AAKE,IAAA,QAAQ,EAAE,CAAChC,OAAO,CAACoB,OALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGtB,SAAS,GAAGA,SAAS,CAACmC,KAAb,GAAqB,MAPjC,CA7EF,EAsFGlC,YAAY,IAAI,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtFnB,CADF;AA0FD","sourcesContent":["import React, { useState, ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { Grid } from '@material-ui/core'\nimport RoundedBtn from '../Button/RoundedBtn'\nimport InputField from '../InputField'\nimport states from '../../static/data/states_hash.json'\nimport { AsYouType, parsePhoneNumberFromString } from 'libphonenumber-js'\nimport { AddressFormType } from '../../utils/types'\nimport TextBtn from '../Button/TextBtn'\n\nconst Container = styled.div`\n  max-width: 100%;\n`\n\ninterface propsValue {\n  initAddress?: any\n  submitBtn?: {\n    label: string\n    handleClick: Function\n  }\n  handleCancel?: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void\n}\nexport default function AddressForm({\n  initAddress,\n  submitBtn,\n  handleCancel\n}: propsValue) {\n  const [address, setAddress] = useState(initAddress || new AddressFormType())\n\n  const handleAddressOnChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    const value = e.target.value\n    const name = e.target.name\n    setAddress({\n      ...address,\n      [name]: value,\n      errors: {\n        ...address.errors,\n        [name]: value !== '' ? '' : address.errors[name]\n      }\n    })\n  }\n  const handlePhoneOnChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    const currentFormatted = e.target.value\n    const phone = currentFormatted.replace(/[^\\d]/g, '')\n    const formatted = new AsYouType('US').input(phone)\n    setAddress({\n      ...address,\n      phone: phone,\n      formattedPhone: formatted,\n      errors: {\n        ...address.errors,\n        phone: phone !== '' ? '' : address.errors.phone\n      }\n    })\n  }\n  const handleAddressOnBlur = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    error: string = 'empty'\n  ) => {\n    const name = e.target.name\n    let errorMsg = ''\n    if (error.includes('empty') && address[name] === '') {\n      errorMsg = 'This is required'\n    }\n    if (error.includes('phone')) {\n      const phone = parsePhoneNumberFromString(address.formattedPhone, 'US')\n      if (phone === undefined || !phone.isValid()) {\n        errorMsg = 'Invalid phone number'\n      }\n    }\n    let isValid: boolean = true\n    if (errorMsg !== '') isValid = false\n    const items = ['fullname', 'line1', 'city', 'state', 'zipcode', 'phone']\n    items.forEach(item => {\n      if (address[item] === '') isValid = false\n    })\n\n    setAddress({\n      ...address,\n      errors: {\n        ...address.errors,\n        [name]: errorMsg\n      },\n      isValid: isValid\n    })\n  }\n  return (\n    <Container>\n      <InputField\n        name=\"fullname\"\n        label=\"Full Name\"\n        value={address.fullname}\n        placeholder=\"First and Last Name\"\n        error={address.errors.fullname}\n        onChange={handleAddressOnChange}\n        onBlur={handleAddressOnBlur}\n      />\n      <InputField\n        name=\"line1\"\n        label=\"Address line 1\"\n        value={address.line1}\n        placeholder=\"1000 Main St\"\n        error={address.errors.line1}\n        onChange={handleAddressOnChange}\n        onBlur={handleAddressOnBlur}\n      />\n      <InputField\n        name=\"line2\"\n        label=\"Address line 2\"\n        value={address.line2}\n        placeholder=\"Apt. 1234\"\n        onChange={handleAddressOnChange}\n        optional\n      />\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <InputField\n            name=\"city\"\n            label=\"City\"\n            value={address.city}\n            placeholder=\"San Jose\"\n            error={address.errors.city}\n            onChange={handleAddressOnChange}\n            onBlur={handleAddressOnBlur}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <InputField\n            name=\"state\"\n            label=\"State\"\n            value={address.state}\n            onChange={handleAddressOnChange}\n            onBlur={handleAddressOnBlur}\n            type=\"select\"\n            options={Object.keys(states)}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <InputField\n            name=\"zipcode\"\n            label=\"Zip code\"\n            value={address.zipcode}\n            placeholder=\"00000\"\n            error={address.errors.zipcode}\n            onChange={handleAddressOnChange}\n            onBlur={handleAddressOnBlur}\n            type=\"number\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <InputField\n            name=\"phone\"\n            label=\"Phone number\"\n            value={address.formattedPhone}\n            error={address.errors.phone}\n            placeholder=\"(123) 456-7890\"\n            onChange={handlePhoneOnChange}\n            onBlur={e => handleAddressOnBlur(e, 'empty|phone')}\n            type=\"tel\"\n          />\n        </Grid>\n      </Grid>\n      <RoundedBtn\n        onClick={() =>\n          address.isValid && submitBtn && submitBtn.handleClick(address)\n        }\n        style={{ marginTop: 16, marginRight: 16 }}\n        disabled={!address.isValid}\n      >\n        {submitBtn ? submitBtn.label : 'Save'}\n      </RoundedBtn>\n      {handleCancel && <TextBtn onClick={handleCancel}>Cancel</TextBtn>}\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}